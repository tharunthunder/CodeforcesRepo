import java.io.PrintWriter;
import java.util.*;
public class NearlyShortestRepeatingSubstring {
	//Problem TLE'd near the end but the algorithm is the same so this is just Java being slower than C++
public static void main(String[]args)
{
	Scanner sc = new Scanner(System.in);
	int N = sc.nextInt();
	PrintWriter pw = new PrintWriter(System.out);
	for(int i = 0;i<N;i++)
	{
		int M = sc.nextInt();
		sc.nextLine();
		String s = sc.nextLine();
		int answer = M;
		for(int j = 1;j<M;j++)
		{
			if(M%j==0)
			{
				//Test this value
				if(testerMethod(j,s))
				{
					answer = Math.min(answer, j);
				}
			}
		}
		pw.println(answer);
		
	}
	pw.close();
}

public static boolean testerMethod(int segSize,String s)
{
	String prefSize = s.substring(0,segSize);
	String sufSize = s.substring(s.length()-segSize);
	boolean fail1 = false;
	boolean fail2 = false;
	int rightPointer = 0;
	int leftPointer = segSize;
	int leftPointer2 = s.length()-segSize;
	int rightPointer2 = s.length();
	boolean fail10 = false;
	boolean fail20 = false;
	
	while(leftPointer<=s.length()&&leftPointer2>=0)
	{
		for(int i = 0;i<prefSize.length();i++)
		{
			if(prefSize.charAt(i)!=s.substring(rightPointer,leftPointer).charAt(i))
			{
				if(!fail1)
				{
					fail1 = true;
				}
				else
				{
					fail2 = true;
				}
			}
			
			if(sufSize.charAt(i)!=s.substring(leftPointer2,rightPointer2).charAt(i))
			{
				if(!fail10)
				{
					fail10 = true;
				}
				else
				{
					fail20 = true;
				}
			}
			
		}
		rightPointer+=segSize;
		leftPointer+=segSize;
		leftPointer2-=segSize;
		rightPointer2-=segSize;
	}
	if(!fail2||!fail20)
	{
		return true;
	}
	return false;
}
}
